2025-07-22 21:59:42.0015 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:00:42.0737 - INFO - graphrag.index.validate_config - LLM Config Params Validated
2025-07-22 22:01:34.0533 - ERROR - graphrag.language_model.providers.fnllm.utils - Error Invoking LLM
Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_transports\default.py", line 394, in handle_async_request
    resp = await self._pool.handle_async_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpcore\_async\connection_pool.py", line 207, in handle_async_request
    raise UnsupportedProtocol(
httpcore.UnsupportedProtocol: Request URL is missing an 'http://' or 'https://' protocol.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_base_client.py", line 1526, in request
    response = await self._client.send(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_client.py", line 1629, in send
    response = await self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_client.py", line 1657, in _send_handling_auth
    response = await self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_client.py", line 1694, in _send_handling_redirects
    response = await self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_client.py", line 1730, in _send_single_request
    response = await transport.handle_async_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_transports\default.py", line 393, in handle_async_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.UnsupportedProtocol: Request URL is missing an 'http://' or 'https://' protocol.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\openai\llm\openai_embeddings_llm.py", line 126, in _execute_llm
    result_raw = await self._client.embeddings.with_raw_response.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_legacy_response.py", line 381, in wrapped
    return cast(LegacyAPIResponse[R], await func(*args, **kwargs))
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\resources\embeddings.py", line 251, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_base_client.py", line 1791, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_base_client.py", line 1558, in request
    raise APIConnectionError(request=request) from err
openai.APIConnectionError: Connection error.
2025-07-22 22:01:34.0535 - ERROR - graphrag.index.validate_config - Embedding LLM configuration error detected. Exiting...
Connection error.
2025-07-22 22:08:39.0479 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:09:08.0798 - ERROR - graphrag.language_model.providers.fnllm.utils - Error Invoking LLM
Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 80, in invoke
    await self._handle_post_request_limiting(result)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 57, in _handle_post_request_limiting
    async with self._limiter.use(manifest):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\base.py", line 32, in __aenter__
    await self._limiter.acquire(self._manifest)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\composite.py", line 33, in acquire
    await limiter.acquire(manifest)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\tpm.py", line 40, in acquire
    await self._limiter.acquire(min(total_tokens, self._tokens_per_minute))
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\aiolimiter\leakybucket.py", line 151, in acquire
    await fut
asyncio.exceptions.CancelledError
2025-07-22 22:09:27.0093 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:10:27.0837 - INFO - graphrag.index.validate_config - LLM Config Params Validated
2025-07-22 22:10:29.0642 - ERROR - graphrag.language_model.providers.fnllm.utils - Error Invoking LLM
Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\openai\llm\openai_embeddings_llm.py", line 126, in _execute_llm
    result_raw = await self._client.embeddings.with_raw_response.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_legacy_response.py", line 381, in wrapped
    return cast(LegacyAPIResponse[R], await func(*args, **kwargs))
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\resources\embeddings.py", line 251, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_base_client.py", line 1791, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\openai\_base_client.py", line 1591, in request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'requestId': '1b1b5aa9-5c09-9e88-86c0-ff344d711484', 'code': 'InvalidParameter', 'message': 'No static resource api-openai/v1/embeddings/embeddings.'}
2025-07-22 22:10:29.0647 - ERROR - graphrag.index.validate_config - Embedding LLM configuration error detected. Exiting...
Error code: 400 - {'requestId': '1b1b5aa9-5c09-9e88-86c0-ff344d711484', 'code': 'InvalidParameter', 'message': 'No static resource api-openai/v1/embeddings/embeddings.'}
2025-07-22 22:19:06.0415 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:19:22.0423 - ERROR - graphrag.language_model.providers.fnllm.utils - Error Invoking LLM
Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 80, in invoke
    await self._handle_post_request_limiting(result)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 57, in _handle_post_request_limiting
    async with self._limiter.use(manifest):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\base.py", line 32, in __aenter__
    await self._limiter.acquire(self._manifest)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\composite.py", line 33, in acquire
    await limiter.acquire(manifest)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\tpm.py", line 40, in acquire
    await self._limiter.acquire(min(total_tokens, self._tokens_per_minute))
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\aiolimiter\leakybucket.py", line 151, in acquire
    await fut
asyncio.exceptions.CancelledError
2025-07-22 22:19:33.0866 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:20:34.0243 - INFO - graphrag.index.validate_config - LLM Config Params Validated
2025-07-22 22:20:34.0700 - INFO - graphrag.index.validate_config - Embedding LLM Config Params Validated
2025-07-22 22:20:34.0700 - INFO - graphrag.cli.index - Starting pipeline run. False
2025-07-22 22:20:34.0700 - INFO - graphrag.cli.index - Using default configuration: {
    "root_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag",
    "models": {
        "default_chat_model": {
            "api_key": "==== REDACTED ====",
            "auth_type": "api_key",
            "type": "openai_chat",
            "model": "qwen-turbo",
            "encoding_model": "cl100k_base",
            "api_base": "https://dashscope.aliyuncs.com/compatible-mode/v1",
            "api_version": null,
            "deployment_name": null,
            "proxy": null,
            "audience": null,
            "model_supports_json": true,
            "request_timeout": 180.0,
            "tokens_per_minute": "auto",
            "requests_per_minute": "auto",
            "retry_strategy": "native",
            "max_retries": 10,
            "max_retry_wait": 10.0,
            "concurrent_requests": 5,
            "async_mode": "threaded",
            "responses": null,
            "max_tokens": null,
            "temperature": 0,
            "max_completion_tokens": null,
            "reasoning_effort": null,
            "top_p": 1,
            "n": 1,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        },
        "default_embedding_model": {
            "api_key": "==== REDACTED ====",
            "auth_type": "api_key",
            "type": "openai_embedding",
            "model": "text-embedding-v2",
            "encoding_model": "cl100k_base",
            "api_base": "https://dashscope.aliyuncs.com/compatible-mode/v1",
            "api_version": null,
            "deployment_name": null,
            "proxy": null,
            "audience": null,
            "model_supports_json": true,
            "request_timeout": 180.0,
            "tokens_per_minute": null,
            "requests_per_minute": null,
            "retry_strategy": "native",
            "max_retries": 10,
            "max_retry_wait": 10.0,
            "concurrent_requests": 25,
            "async_mode": "threaded",
            "responses": null,
            "max_tokens": null,
            "temperature": 0,
            "max_completion_tokens": null,
            "reasoning_effort": null,
            "top_p": 1,
            "n": 1,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        }
    },
    "input": {
        "storage": {
            "type": "file",
            "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\input",
            "storage_account_blob_url": null,
            "cosmosdb_account_url": null
        },
        "file_type": "text",
        "encoding": "utf-8",
        "file_pattern": ".*\\.txt$",
        "file_filter": null,
        "text_column": "text",
        "title_column": null,
        "metadata": null
    },
    "chunks": {
        "size": 1200,
        "overlap": 100,
        "group_by_columns": [
            "id"
        ],
        "strategy": "tokens",
        "encoding_model": "cl100k_base",
        "prepend_metadata": false,
        "chunk_size_includes_metadata": false
    },
    "output": {
        "type": "file",
        "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\output",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "outputs": null,
    "update_index_output": {
        "type": "file",
        "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\update_output",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "cache": {
        "type": "file",
        "base_dir": "cache",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "reporting": {
        "type": "file",
        "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\logs",
        "storage_account_blob_url": null
    },
    "vector_store": {
        "default_vector_store": {
            "type": "lancedb",
            "db_uri": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\output\\lancedb",
            "url": null,
            "audience": null,
            "container_name": "==== REDACTED ====",
            "database_name": null,
            "overwrite": true
        }
    },
    "workflows": null,
    "embed_text": {
        "model_id": "default_embedding_model",
        "vector_store_id": "default_vector_store",
        "batch_size": 16,
        "batch_max_tokens": 8191,
        "names": [
            "entity.description",
            "community.full_content",
            "text_unit.text"
        ],
        "strategy": null
    },
    "extract_graph": {
        "model_id": "default_chat_model",
        "prompt": "prompts/extract_graph.txt",
        "entity_types": [
            "organization",
            "person",
            "geo",
            "event"
        ],
        "max_gleanings": 1,
        "strategy": null
    },
    "summarize_descriptions": {
        "model_id": "default_chat_model",
        "prompt": "prompts/summarize_descriptions.txt",
        "max_length": 500,
        "max_input_tokens": 4000,
        "strategy": null
    },
    "extract_graph_nlp": {
        "normalize_edge_weights": true,
        "text_analyzer": {
            "extractor_type": "regex_english",
            "model_name": "en_core_web_md",
            "max_word_length": 15,
            "word_delimiter": " ",
            "include_named_entities": true,
            "exclude_nouns": [
                "stuff",
                "thing",
                "things",
                "bunch",
                "bit",
                "bits",
                "people",
                "person",
                "okay",
                "hey",
                "hi",
                "hello",
                "laughter",
                "oh"
            ],
            "exclude_entity_tags": [
                "DATE"
            ],
            "exclude_pos_tags": [
                "DET",
                "PRON",
                "INTJ",
                "X"
            ],
            "noun_phrase_tags": [
                "PROPN",
                "NOUNS"
            ],
            "noun_phrase_grammars": {
                "PROPN,PROPN": "PROPN",
                "NOUN,NOUN": "NOUNS",
                "NOUNS,NOUN": "NOUNS",
                "ADJ,ADJ": "ADJ",
                "ADJ,NOUN": "NOUNS"
            }
        },
        "concurrent_requests": 25
    },
    "prune_graph": {
        "min_node_freq": 2,
        "max_node_freq_std": null,
        "min_node_degree": 1,
        "max_node_degree_std": null,
        "min_edge_weight_pct": 40.0,
        "remove_ego_nodes": true,
        "lcc_only": false
    },
    "cluster_graph": {
        "max_cluster_size": 10,
        "use_lcc": true,
        "seed": 3735928559
    },
    "extract_claims": {
        "enabled": false,
        "model_id": "default_chat_model",
        "prompt": "prompts/extract_claims.txt",
        "description": "Any claims or facts that could be relevant to information discovery.",
        "max_gleanings": 1,
        "strategy": null
    },
    "community_reports": {
        "model_id": "default_chat_model",
        "graph_prompt": "prompts/community_report_graph.txt",
        "text_prompt": "prompts/community_report_text.txt",
        "max_length": 2000,
        "max_input_length": 8000,
        "strategy": null
    },
    "embed_graph": {
        "enabled": false,
        "dimensions": 1536,
        "num_walks": 10,
        "walk_length": 40,
        "window_size": 2,
        "iterations": 3,
        "random_seed": 597832,
        "use_lcc": true
    },
    "umap": {
        "enabled": false
    },
    "snapshots": {
        "embeddings": false,
        "graphml": false,
        "raw_graph": false
    },
    "local_search": {
        "prompt": "prompts/local_search_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "text_unit_prop": 0.5,
        "community_prop": 0.15,
        "conversation_history_max_turns": 5,
        "top_k_entities": 10,
        "top_k_relationships": 10,
        "max_context_tokens": 12000
    },
    "global_search": {
        "map_prompt": "prompts/global_search_map_system_prompt.txt",
        "reduce_prompt": "prompts/global_search_reduce_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "knowledge_prompt": "prompts/global_search_knowledge_system_prompt.txt",
        "max_context_tokens": 12000,
        "data_max_tokens": 12000,
        "map_max_length": 1000,
        "reduce_max_length": 2000,
        "dynamic_search_threshold": 1,
        "dynamic_search_keep_parent": false,
        "dynamic_search_num_repeats": 1,
        "dynamic_search_use_summary": false,
        "dynamic_search_max_level": 2
    },
    "drift_search": {
        "prompt": "prompts/drift_search_system_prompt.txt",
        "reduce_prompt": "prompts/drift_search_reduce_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "data_max_tokens": 12000,
        "reduce_max_tokens": null,
        "reduce_temperature": 0,
        "reduce_max_completion_tokens": null,
        "concurrency": 32,
        "drift_k_followups": 20,
        "primer_folds": 5,
        "primer_llm_max_tokens": 12000,
        "n_depth": 3,
        "local_search_text_unit_prop": 0.9,
        "local_search_community_prop": 0.1,
        "local_search_top_k_mapped_entities": 10,
        "local_search_top_k_relationships": 10,
        "local_search_max_data_tokens": 12000,
        "local_search_temperature": 0,
        "local_search_top_p": 1,
        "local_search_n": 1,
        "local_search_llm_max_gen_tokens": null,
        "local_search_llm_max_gen_completion_tokens": null
    },
    "basic_search": {
        "prompt": "prompts/basic_search_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "k": 10,
        "max_context_tokens": 12000
    }
}
2025-07-22 22:20:34.0710 - INFO - graphrag.api.index - Initializing indexing pipeline...
2025-07-22 22:20:34.0710 - INFO - graphrag.index.workflows.factory - Creating pipeline with workflows: ['load_input_documents', 'create_base_text_units', 'create_final_documents', 'extract_graph', 'finalize_graph', 'extract_covariates', 'create_communities', 'create_final_text_units', 'create_community_reports', 'generate_text_embeddings']
2025-07-22 22:20:34.0711 - INFO - graphrag.storage.file_pipeline_storage - Creating file storage at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\input
2025-07-22 22:20:34.0711 - INFO - graphrag.storage.file_pipeline_storage - Creating file storage at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\output
2025-07-22 22:20:34.0713 - INFO - graphrag.index.run.run_pipeline - Running standard indexing.
2025-07-22 22:20:34.0717 - INFO - graphrag.index.run.run_pipeline - Executing pipeline...
2025-07-22 22:20:34.0717 - INFO - graphrag.index.input.factory - loading input from root_dir=D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\input
2025-07-22 22:20:34.0717 - INFO - graphrag.index.input.factory - Loading Input InputFileType.text
2025-07-22 22:20:34.0718 - INFO - graphrag.storage.file_pipeline_storage - search D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\input for files matching .*\.txt$
2025-07-22 22:20:34.0868 - INFO - graphrag.index.input.util - Found 1 InputFileType.text files, loading 1
2025-07-22 22:20:34.0891 - INFO - graphrag.index.input.util - Total number of unfiltered InputFileType.text rows: 1
2025-07-22 22:20:34.0900 - INFO - graphrag.index.workflows.load_input_documents - Final # of rows loaded: 1
2025-07-22 22:20:35.0529 - INFO - graphrag.api.index - Workflow load_input_documents completed successfully
2025-07-22 22:20:35.0674 - INFO - graphrag.index.workflows.create_base_text_units - Workflow started: create_base_text_units
2025-07-22 22:20:35.0674 - INFO - graphrag.utils.storage - reading table from storage: documents.parquet
2025-07-22 22:20:36.0257 - INFO - graphrag.index.workflows.create_base_text_units - Starting chunking process for 1 documents
2025-07-22 22:20:36.0332 - INFO - graphrag.index.workflows.create_base_text_units - chunker progress:  1/1
2025-07-22 22:20:36.0503 - INFO - graphrag.index.workflows.create_base_text_units - Workflow completed: create_base_text_units
2025-07-22 22:20:36.0503 - INFO - graphrag.api.index - Workflow create_base_text_units completed successfully
2025-07-22 22:20:36.0517 - INFO - graphrag.index.workflows.create_final_documents - Workflow started: create_final_documents
2025-07-22 22:20:36.0519 - INFO - graphrag.utils.storage - reading table from storage: documents.parquet
2025-07-22 22:20:36.0523 - INFO - graphrag.utils.storage - reading table from storage: text_units.parquet
2025-07-22 22:20:36.0572 - INFO - graphrag.index.workflows.create_final_documents - Workflow completed: create_final_documents
2025-07-22 22:20:36.0572 - INFO - graphrag.api.index - Workflow create_final_documents completed successfully
2025-07-22 22:20:36.0587 - INFO - graphrag.index.workflows.extract_graph - Workflow started: extract_graph
2025-07-22 22:20:36.0589 - INFO - graphrag.utils.storage - reading table from storage: text_units.parquet
2025-07-22 22:21:58.0050 - INFO - graphrag.logger.progress - extract graph progress: 1/31
2025-07-22 22:21:58.0050 - INFO - graphrag.logger.progress - extract graph progress: 2/31
2025-07-22 22:21:58.0054 - INFO - graphrag.logger.progress - extract graph progress: 3/31
2025-07-22 22:21:58.0054 - INFO - graphrag.logger.progress - extract graph progress: 4/31
2025-07-22 22:21:58.0054 - INFO - graphrag.logger.progress - extract graph progress: 5/31
2025-07-22 22:22:10.0115 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:23:10.0482 - INFO - graphrag.index.validate_config - LLM Config Params Validated
2025-07-22 22:23:10.0954 - INFO - graphrag.index.validate_config - Embedding LLM Config Params Validated
2025-07-22 22:23:10.0954 - INFO - graphrag.cli.index - Starting pipeline run. False
2025-07-22 22:23:10.0954 - INFO - graphrag.cli.index - Using default configuration: {
    "root_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag",
    "models": {
        "default_chat_model": {
            "api_key": "==== REDACTED ====",
            "auth_type": "api_key",
            "type": "openai_chat",
            "model": "qwen-turbo",
            "encoding_model": "cl100k_base",
            "api_base": "https://dashscope.aliyuncs.com/compatible-mode/v1",
            "api_version": null,
            "deployment_name": null,
            "proxy": null,
            "audience": null,
            "model_supports_json": true,
            "request_timeout": 180.0,
            "tokens_per_minute": "auto",
            "requests_per_minute": "auto",
            "retry_strategy": "native",
            "max_retries": 10,
            "max_retry_wait": 10.0,
            "concurrent_requests": 5,
            "async_mode": "threaded",
            "responses": null,
            "max_tokens": null,
            "temperature": 0,
            "max_completion_tokens": null,
            "reasoning_effort": null,
            "top_p": 1,
            "n": 1,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        },
        "default_embedding_model": {
            "api_key": "==== REDACTED ====",
            "auth_type": "api_key",
            "type": "openai_embedding",
            "model": "text-embedding-v2",
            "encoding_model": "cl100k_base",
            "api_base": "https://dashscope.aliyuncs.com/compatible-mode/v1",
            "api_version": null,
            "deployment_name": null,
            "proxy": null,
            "audience": null,
            "model_supports_json": true,
            "request_timeout": 180.0,
            "tokens_per_minute": null,
            "requests_per_minute": null,
            "retry_strategy": "native",
            "max_retries": 10,
            "max_retry_wait": 10.0,
            "concurrent_requests": 25,
            "async_mode": "threaded",
            "responses": null,
            "max_tokens": null,
            "temperature": 0,
            "max_completion_tokens": null,
            "reasoning_effort": null,
            "top_p": 1,
            "n": 1,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        }
    },
    "input": {
        "storage": {
            "type": "file",
            "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\input",
            "storage_account_blob_url": null,
            "cosmosdb_account_url": null
        },
        "file_type": "text",
        "encoding": "utf-8",
        "file_pattern": ".*\\.txt$",
        "file_filter": null,
        "text_column": "text",
        "title_column": null,
        "metadata": null
    },
    "chunks": {
        "size": 1200,
        "overlap": 100,
        "group_by_columns": [
            "id"
        ],
        "strategy": "tokens",
        "encoding_model": "cl100k_base",
        "prepend_metadata": false,
        "chunk_size_includes_metadata": false
    },
    "output": {
        "type": "file",
        "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\output",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "outputs": null,
    "update_index_output": {
        "type": "file",
        "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\update_output",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "cache": {
        "type": "file",
        "base_dir": "cache",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "reporting": {
        "type": "file",
        "base_dir": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\logs",
        "storage_account_blob_url": null
    },
    "vector_store": {
        "default_vector_store": {
            "type": "lancedb",
            "db_uri": "D:\\workspace\\open-graphrag-app\\fast-graphrag\\_tmp\\rag\\output\\lancedb",
            "url": null,
            "audience": null,
            "container_name": "==== REDACTED ====",
            "database_name": null,
            "overwrite": true
        }
    },
    "workflows": null,
    "embed_text": {
        "model_id": "default_embedding_model",
        "vector_store_id": "default_vector_store",
        "batch_size": 16,
        "batch_max_tokens": 8191,
        "names": [
            "entity.description",
            "community.full_content",
            "text_unit.text"
        ],
        "strategy": null
    },
    "extract_graph": {
        "model_id": "default_chat_model",
        "prompt": "prompts/extract_graph.txt",
        "entity_types": [
            "organization",
            "person",
            "geo",
            "event"
        ],
        "max_gleanings": 1,
        "strategy": null
    },
    "summarize_descriptions": {
        "model_id": "default_chat_model",
        "prompt": "prompts/summarize_descriptions.txt",
        "max_length": 500,
        "max_input_tokens": 4000,
        "strategy": null
    },
    "extract_graph_nlp": {
        "normalize_edge_weights": true,
        "text_analyzer": {
            "extractor_type": "regex_english",
            "model_name": "en_core_web_md",
            "max_word_length": 15,
            "word_delimiter": " ",
            "include_named_entities": true,
            "exclude_nouns": [
                "stuff",
                "thing",
                "things",
                "bunch",
                "bit",
                "bits",
                "people",
                "person",
                "okay",
                "hey",
                "hi",
                "hello",
                "laughter",
                "oh"
            ],
            "exclude_entity_tags": [
                "DATE"
            ],
            "exclude_pos_tags": [
                "DET",
                "PRON",
                "INTJ",
                "X"
            ],
            "noun_phrase_tags": [
                "PROPN",
                "NOUNS"
            ],
            "noun_phrase_grammars": {
                "PROPN,PROPN": "PROPN",
                "NOUN,NOUN": "NOUNS",
                "NOUNS,NOUN": "NOUNS",
                "ADJ,ADJ": "ADJ",
                "ADJ,NOUN": "NOUNS"
            }
        },
        "concurrent_requests": 25
    },
    "prune_graph": {
        "min_node_freq": 2,
        "max_node_freq_std": null,
        "min_node_degree": 1,
        "max_node_degree_std": null,
        "min_edge_weight_pct": 40.0,
        "remove_ego_nodes": true,
        "lcc_only": false
    },
    "cluster_graph": {
        "max_cluster_size": 10,
        "use_lcc": true,
        "seed": 3735928559
    },
    "extract_claims": {
        "enabled": false,
        "model_id": "default_chat_model",
        "prompt": "prompts/extract_claims.txt",
        "description": "Any claims or facts that could be relevant to information discovery.",
        "max_gleanings": 1,
        "strategy": null
    },
    "community_reports": {
        "model_id": "default_chat_model",
        "graph_prompt": "prompts/community_report_graph.txt",
        "text_prompt": "prompts/community_report_text.txt",
        "max_length": 2000,
        "max_input_length": 8000,
        "strategy": null
    },
    "embed_graph": {
        "enabled": false,
        "dimensions": 1536,
        "num_walks": 10,
        "walk_length": 40,
        "window_size": 2,
        "iterations": 3,
        "random_seed": 597832,
        "use_lcc": true
    },
    "umap": {
        "enabled": false
    },
    "snapshots": {
        "embeddings": false,
        "graphml": false,
        "raw_graph": false
    },
    "local_search": {
        "prompt": "prompts/local_search_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "text_unit_prop": 0.5,
        "community_prop": 0.15,
        "conversation_history_max_turns": 5,
        "top_k_entities": 10,
        "top_k_relationships": 10,
        "max_context_tokens": 12000
    },
    "global_search": {
        "map_prompt": "prompts/global_search_map_system_prompt.txt",
        "reduce_prompt": "prompts/global_search_reduce_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "knowledge_prompt": "prompts/global_search_knowledge_system_prompt.txt",
        "max_context_tokens": 12000,
        "data_max_tokens": 12000,
        "map_max_length": 1000,
        "reduce_max_length": 2000,
        "dynamic_search_threshold": 1,
        "dynamic_search_keep_parent": false,
        "dynamic_search_num_repeats": 1,
        "dynamic_search_use_summary": false,
        "dynamic_search_max_level": 2
    },
    "drift_search": {
        "prompt": "prompts/drift_search_system_prompt.txt",
        "reduce_prompt": "prompts/drift_search_reduce_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "data_max_tokens": 12000,
        "reduce_max_tokens": null,
        "reduce_temperature": 0,
        "reduce_max_completion_tokens": null,
        "concurrency": 32,
        "drift_k_followups": 20,
        "primer_folds": 5,
        "primer_llm_max_tokens": 12000,
        "n_depth": 3,
        "local_search_text_unit_prop": 0.9,
        "local_search_community_prop": 0.1,
        "local_search_top_k_mapped_entities": 10,
        "local_search_top_k_relationships": 10,
        "local_search_max_data_tokens": 12000,
        "local_search_temperature": 0,
        "local_search_top_p": 1,
        "local_search_n": 1,
        "local_search_llm_max_gen_tokens": null,
        "local_search_llm_max_gen_completion_tokens": null
    },
    "basic_search": {
        "prompt": "prompts/basic_search_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "k": 10,
        "max_context_tokens": 12000
    }
}
2025-07-22 22:23:10.0977 - INFO - graphrag.api.index - Initializing indexing pipeline...
2025-07-22 22:23:10.0977 - INFO - graphrag.index.workflows.factory - Creating pipeline with workflows: ['load_input_documents', 'create_base_text_units', 'create_final_documents', 'extract_graph', 'finalize_graph', 'extract_covariates', 'create_communities', 'create_final_text_units', 'create_community_reports', 'generate_text_embeddings']
2025-07-22 22:23:10.0978 - INFO - graphrag.storage.file_pipeline_storage - Creating file storage at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\input
2025-07-22 22:23:10.0978 - INFO - graphrag.storage.file_pipeline_storage - Creating file storage at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\output
2025-07-22 22:23:10.0981 - INFO - graphrag.index.run.run_pipeline - Running standard indexing.
2025-07-22 22:23:10.0983 - INFO - graphrag.index.run.run_pipeline - Executing pipeline...
2025-07-22 22:23:10.0983 - INFO - graphrag.index.input.factory - loading input from root_dir=D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\input
2025-07-22 22:23:10.0984 - INFO - graphrag.index.input.factory - Loading Input InputFileType.text
2025-07-22 22:23:10.0984 - INFO - graphrag.storage.file_pipeline_storage - search D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\input for files matching .*\.txt$
2025-07-22 22:23:10.0987 - INFO - graphrag.index.input.util - Found 1 InputFileType.text files, loading 1
2025-07-22 22:23:10.0987 - INFO - graphrag.index.input.util - Total number of unfiltered InputFileType.text rows: 1
2025-07-22 22:23:10.0987 - INFO - graphrag.index.workflows.load_input_documents - Final # of rows loaded: 1
2025-07-22 22:23:10.0994 - INFO - graphrag.api.index - Workflow load_input_documents completed successfully
2025-07-22 22:23:10.0999 - INFO - graphrag.index.workflows.create_base_text_units - Workflow started: create_base_text_units
2025-07-22 22:23:10.0999 - INFO - graphrag.utils.storage - reading table from storage: documents.parquet
2025-07-22 22:23:11.0026 - INFO - graphrag.index.workflows.create_base_text_units - Starting chunking process for 1 documents
2025-07-22 22:23:11.0055 - INFO - graphrag.index.workflows.create_base_text_units - chunker progress:  1/1
2025-07-22 22:23:11.0058 - INFO - graphrag.index.workflows.create_base_text_units - Workflow completed: create_base_text_units
2025-07-22 22:23:11.0058 - INFO - graphrag.api.index - Workflow create_base_text_units completed successfully
2025-07-22 22:23:11.0071 - INFO - graphrag.index.workflows.create_final_documents - Workflow started: create_final_documents
2025-07-22 22:23:11.0072 - INFO - graphrag.utils.storage - reading table from storage: documents.parquet
2025-07-22 22:23:11.0075 - INFO - graphrag.utils.storage - reading table from storage: text_units.parquet
2025-07-22 22:23:11.0097 - INFO - graphrag.index.workflows.create_final_documents - Workflow completed: create_final_documents
2025-07-22 22:23:11.0097 - INFO - graphrag.api.index - Workflow create_final_documents completed successfully
2025-07-22 22:23:11.0104 - INFO - graphrag.index.workflows.extract_graph - Workflow started: extract_graph
2025-07-22 22:23:11.0105 - INFO - graphrag.utils.storage - reading table from storage: text_units.parquet
2025-07-22 22:36:16.0149 - INFO - graphrag.logger.progress - extract graph progress: 1/31
2025-07-22 22:38:11.0402 - INFO - graphrag.logger.progress - extract graph progress: 2/31
2025-07-22 22:39:11.0411 - INFO - graphrag.logger.progress - extract graph progress: 3/31
2025-07-22 22:40:11.0432 - INFO - graphrag.logger.progress - extract graph progress: 4/31
2025-07-22 22:42:11.0465 - INFO - graphrag.logger.progress - extract graph progress: 5/31
2025-07-22 22:45:12.0750 - INFO - graphrag.logger.progress - extract graph progress: 6/31
2025-07-22 22:45:12.0750 - INFO - graphrag.logger.progress - extract graph progress: 7/31
2025-07-22 22:45:12.0750 - INFO - graphrag.logger.progress - extract graph progress: 8/31
2025-07-22 22:45:12.0750 - INFO - graphrag.logger.progress - extract graph progress: 9/31
2025-07-22 22:45:12.0810 - INFO - graphrag.logger.progress - extract graph progress: 10/31
2025-07-22 22:45:35.0139 - INFO - graphrag.cli.index - Logging enabled at D:\workspace\open-graphrag-app\fast-graphrag\_tmp\rag\logs\logs.txt
2025-07-22 22:46:13.0476 - ERROR - graphrag.language_model.providers.fnllm.utils - Error Invoking LLM
Traceback (most recent call last):
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 80, in invoke
    await self._handle_post_request_limiting(result)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\base\services\rate_limiter.py", line 57, in _handle_post_request_limiting
    async with self._limiter.use(manifest):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\base.py", line 32, in __aenter__
    await self._limiter.acquire(self._manifest)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\composite.py", line 33, in acquire
    await limiter.acquire(manifest)
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\fnllm\limiting\tpm.py", line 40, in acquire
    await self._limiter.acquire(min(total_tokens, self._tokens_per_minute))
  File "D:\workspace\open-graphrag-app\fast-graphrag\.venv\Lib\site-packages\aiolimiter\leakybucket.py", line 151, in acquire
    await fut
asyncio.exceptions.CancelledError
